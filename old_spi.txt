ISR (SPI_STC_vect) 
//ISR routine grabs data from SPI buffer, deserializes it in the inbox, 
//and then when the inbox is full or the serialize flag is recieved, calls
//the assigned user function to parse the data.
{
	// inbox = realloc(inbox, 64);
	byte c = (byte) SPDR;  // grab byte from SPI Data Register


	if((shieldMailbox.messageIndex == 0) && ((char) c == '$')) //look for message start flag;
	{
		shieldMailbox.messageIndex++;
	}
	else
	{
		if(shieldMailbox.messageIndex == 1) //store length of incoming message
		{
			shieldMailbox.inboxSize = c;
			shieldMailbox.inboxSize << 8;
		}
		else if(shieldMailbox.messageIndex == 2) //store length of incoming message
		{
			shieldMailbox.inboxSize += c;
			//shieldMailbox.inbox = realloc(*shieldMailbox.inbox, shieldMailbox.inboxSize);
		}
		else if(shieldMailbox.messageIndex == (3+shieldMailbox.inboxSize))
		{
			if(shieldMailbox.checksum == c)
			{
				Serial.print('$',HEX);
				Serial.print(',');
				Serial.print((byte)shieldMailbox.inboxSize>>8, HEX);
				Serial.print(',');
				Serial.print((byte)shieldMailbox.inboxSize, HEX);
				Serial.print(',');
				for(unsigned int i = 0; i < shieldMailbox.inboxSize; i++)
				{
					Serial.print(shieldMailbox.inbox[i], HEX);
					Serial.print(',');
				}
				Serial.println(shieldMailbox.checksum, HEX);
			}
			shieldMailbox.messageIndex = 0;
			shieldMailbox.checksum = 0;
			return;
		}
		else //if((shieldMailbox.messageIndex > 2) && (shieldMailbox.messageIndex < (3+shieldMailbox.inboxSize))) //message body
		{
			shieldMailbox.inbox[shieldMailbox.messageIndex - 3] = c;
			shieldMailbox.checksum += c;
		}
		shieldMailbox.messageIndex++;
	}

	

	// if(1) //place to pull MS back high when transmit is done.
	// {
	// 	digitalWrite(MS, HIGH);
	// }
}  // end of interrupt routine SPI_STC_vect